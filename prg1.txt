.l part

%{
/* a. Write a LEX program to recognize valid arithmetic expression. Identifiers in the expression
could be only integers and operators could be + and *. Count the identifiers & operators present
and print them separately. */


#include<stdio.h>
int count1=0,count2=0,bracket=0,count3=0;
%}
%%
[+] { printf("operator: +"); count1++; count2++;}
[-] { printf("operator: -"); count1++; count2++;}
[*] { printf("operator: *"); count1++; count2++;}
[/] { printf("operator: /"); count1++; count2++;}
[0-9]+ {printf("identifier: %s",yytext);count2++;count3++;}
[(] {bracket++;}
[)] {bracket--;}
%%
main()
{
printf("ENTER THE EXPRESSION : ");
yylex();
printf("number of operators = %d",count1);
printf("\nnumber of identifiers = %d",count3);
if(count2%2==0||bracket!=0||count2==0)
printf("\nInvalid Expression\n");
else
printf("\nValid Expression\n");
}

***************************************************************************************************************
.l part
%{
/* Write YACC program to evaluate arithmetic expression involving operators: +, -, *, and /. */


#include "y.tab.h"
extern yylval;
%}
%%
[0-9]+ {yylval=atoi(yytext);return num;}
[ \t] ;
. {return yytext[0];}
\n {return 0;}
%%

.y part
%{
#include<stdio.h>
#include<stdlib.h>
%}
%token num
%left '+' '-'
%left '*' '/'
%%
input:exp {printf("%d\n",$$);exit(0);}
exp:exp'+'exp {$$=$1+$3;}
|exp'-'exp {$$=$1-$3;}
|exp'*'exp {$$=$1*$3;}
|exp'/'exp { if($3==0){printf("Divide byZero\n");exit(0);} else $$=$1/$3;}
|'('exp')'{$$=$2;}
|num {$$=$1;};
%%
int yyerror()
{
printf("error");
exit(0);
}
int main()
{
printf("Enter an expression:\n");
yyparse();
}
