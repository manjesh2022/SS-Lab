.l part


%{
/* 6.a) Write a LEX program to eliminate comment lines in a C program and copy the resulting
program into a separate file. */
#include<stdio.h>
int c_count=0; 
%}
%%
"/*"[^*/]*"*/" {c_count++;}
"//".* {c_count++;}
%%
int main( int argc, char *argv[])
{
if(argc!=3)
{
printf("usage %s <src file> <dest file>",argv[0]);
return 0;
} 
yyin=fopen(argv[1],"r");
yyout=fopen(argv[2],"w");
yylex();
printf("Number of Comment Lines: %d\n",c_count);
return 0;
}
***********************************************************************************************************
.L

%{
/* b) Write YACC program to recognize valid identifier, operators and keywords in the given text (C
program) file. */
#include <stdio.h>
#include "y.tab.h"
extern yylval;
%}
%%
[ \t] ;
[+|-|*|/|=|<|>] {printf("operator is %s\n",yytext);return OP;}
[0-9]+ {yylval = atoi(yytext); printf("numbers is %d\n",yylval); return DIGIT;}
int|char|bool|float|void|for|do|while|if|else|return {printf("keyword is %s\n",yytext);return KEY;}
[a-zA-Z0-9]+ {printf("identifier is %s\n",yytext);return ID;}
. ;
%%

.Y part


%{
#include <stdio.h>
#include <stdlib.h>
int id=0, dig=0, key=0, op=0;
extern FILE *yyin;
%}
%token DIGIT ID KEY OP
%%
input:
DIGIT input { dig++; }
| ID input { id++; }
| KEY input { key++; }
| OP input {op++;}
| DIGIT { dig++; }
| ID { id++; }
| KEY { key++; }
| OP { op++;}
;
%%
int main(int argc, char *argv[]) {
yyin = fopen(argv[1], "r");
do {
yyparse();
} while (!feof(yyin));
printf("numbers = %d\nKeywords = %d\nIdentifiers = %d\noperators = %d\n",
dig, key,id, op);
}
int yyerror() {
printf("parse error! Message: ");
exit(0);
}
